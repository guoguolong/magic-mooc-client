{"version":3,"sources":["store/apis.tsx","components/admin/CourseEdit.tsx","components/admin/CourseList.tsx","admin.tsx","store/config.js","serviceWorker.ts"],"names":["coureClient","ApolloClient","uri","config","baseApiUrl","id","a","query","gql","variables","resp","data","detail","list","body","price","mutate","mutation","update","cache","COURSE_LIST","readQuery","push","writeQuery","e","save","error","message","remove","getCourseDetail","getCourseList","saveCourse","deleteCourse","useState","name","summary","course","setCourse","saved","setSaved","setMessage","courseId","useParams","useEffect","apis","courseObj","className","to","enableReinitialize","initialValues","validationSchema","Yup","max","required","onSubmit","values","setSubmitting","htmlFor","type","as","CourseItem","item","updateCourses","title","onClick","courses","setCourses","compList","courseList","filter","it","map","key","ReactDOM","render","path","CourseEdit","CourseList","document","getElementById","serviceWorker","Boolean","window","location","hostname","match","unregister","navigator","ready","then","registration","catch","console"],"mappings":"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","file":"static/js/admin.1d0c3f28.b9366e7a.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost'\nimport gql from 'graphql-tag';\nimport config from './config';\n\nconst coureClient = new ApolloClient({\n    uri: config.baseApiUrl + 'course'\n});\n\nasync function getCourseDetail(id: number) {\n    id = id / 1;\n    const resp = await coureClient.query({\n        query: gql`\n            query($id: Int!){\n                detail (id: $id){\n                    id,name,price,summary\n                }\n            }\n        `,\n        variables: {\n            id\n        }\n    })\n    return resp.data.detail;    \n}\n\nasync function getCourseList() {\n    const resp = await coureClient.query({\n        query: gql`\n            query($pageNo: Int){\n                list (pageNo: $pageNo){\n                    id,name,price,summary\n                }\n            }\n        `,\n        // fetchPolicy: 'network-only'\n        // pageNo is an optional arguments, so 'varaibles' is not mandatory.\n    })\n    return resp.data.list;\n}\n\nasync function saveCourse(body: any, id?: number) {\n    id /= 1;\n    const data = { ...body }\n    data.price = data.price / 1;\n    try {\n        const resp = await coureClient.mutate({\n            mutation: gql`\n                mutation($data: CourseInputType!){\n                    save (data: $data){\n                        id, name, summary, price\n                    }\n                }\n            `,\n            variables: {\n                data\n            },\n            update: (cache, { data }) => {\n                const COURSE_LIST = gql`\n                    query($pageNo: Int){\n                        list (pageNo: $pageNo){\n                            id,name,price,summary\n                        }\n                    }\n                `;\n                try {\n                    let { list } = cache.readQuery({ query: COURSE_LIST });\n                    list.push(data);\n                    cache.writeQuery({\n                        query: COURSE_LIST,\n                        data: {\n                            'list': list\n                        }\n                    });\n                } catch (e) {\n                    // We should always catch here,\n                    // as the cache may be empty or the query may fail\n                }\n            }\n        })\n        return resp.data.save\n    } catch (e) {\n        return {\n            error: 10,\n            message: e.message\n        }\n    }\n}\n\nasync function deleteCourse(id: number) {\n    id /= 1;\n    const resp = await coureClient.mutate({\n        mutation: gql`\n            mutation ($id: Int!){\n                remove (id: $id){\n                    error, message\n                }\n            }\n        `,\n        variables: {\n            id\n        }\n    })\n    return resp.data.remove;\n}\n\nexport default {\n    getCourseDetail,\n    getCourseList,\n    saveCourse,\n    deleteCourse\n}","import React, { useEffect, useState } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport apis from '../../store/apis'\nimport '../../assets/styles/admin/course-edit.less'\nimport { useParams, Redirect, Link } from 'react-router-dom';\n\nexport default () => {\n    const [course, setCourse] = useState({ name: '', id: 0, summary: '', price: 0});\n    const [saved, setSaved] = useState(false);\n    const [message, setMessage] = useState('');\n    let { courseId } = useParams();\n    courseId = courseId || 0;\n    useEffect(() => {\n        (async () => {\n            let courseObj = await apis.getCourseDetail(courseId);\n            if (courseObj)\n                setCourse(courseObj);\n        })();\n    }, [courseId])\n    return (\n        <div className=\"form-container\">\n            <h1>Course Edit</h1>\n            <Link to=\"/admin\">Back to list</Link>\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ name: course.name, id: course.id, summary: course.summary, price: course.price }}\n                validationSchema={Yup.object({\n                    name: Yup.string()\n                        .max(30, 'Must be 30 characters or less')\n                        .required('Title can not be empty'),\n                    summary: Yup.string()\n                        .max(500, 'Must be 500 characters or less')\n                        .required('Summary can not be empty'),\n                    price: Yup.string()\n                        .required('Required'),\n                })}\n                onSubmit={async (values, { setSubmitting }) => {\n                    const resp = await apis.saveCourse(values, courseId);\n                    if (resp.error) {\n                        setMessage(resp.message);\n                    } else {\n                        setCourse(resp);\n                        setSaved(true)\n                    }\n                }}\n            >\n                <Form className=\"course-form form\">\n                    {saved && <Redirect to=\"/admin\" />}\n                    {message && <div className=\"error\">{message}</div>}\n                    <div className=\"row\">\n                        <label htmlFor=\"name\">Title: </label>\n                        <Field name=\"name\" type=\"text\" />\n                        <ErrorMessage name=\"name\" />\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"summary\">Intro: </label>\n                        <Field name=\"summary\" as=\"textarea\" />\n                        <ErrorMessage name=\"summary\" />\n                    </div>\n                    <div className=\"row\">\n                        <div><label htmlFor=\"price\">Price: </label>\n                            <Field name=\"price\" type=\"text\" /></div>\n                        <div><ErrorMessage name=\"price\" /></div>\n                    </div>\n                    <div className=\"row center\">\n                        <button type=\"submit\">Save</button>\n                    </div>\n                </Form>\n            </Formik>\n        </div >\n    );\n};","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport apis from '../../store/apis'\nimport '../../assets/styles/admin/course-list.less'\n\nfunction CourseItem({item, updateCourses}:any) {\n    return (\n        <li>\n            <span>{item.id}</span>\n            <span><Link to={'/admin/course/' + item.id}>{item.name}</Link></span>\n            <span>¥{item.price}</span>\n            <span className=\"summary\" title={item.summary}>{item.summary}</span>\n            <span className=\"button\" onClick={async ()=>{\n                 const resp = await apis.deleteCourse(item.id)\n                 if (!resp.error) {\n                     updateCourses(item.id)\n                 }\n            }}>[DELETE]</span>\n        </li>\n    )\n}\nexport default () => {\n    const [courses, setCourses] = useState([]);\n    useEffect(() => {\n        (async () => {\n            function updateCourses(id:number) {\n                courseList = courseList.filter(it=> {\n                    return (it.id !== id)\n                })\n\n                const compList = courseList.map(it=> {\n                    return <CourseItem key={it.id} item={it} updateCourses={updateCourses} />\n                })\n\n                setCourses(compList);\n            }\n            let courseList = await apis.getCourseList();\n\n            const list = courseList.map(item => {\n                return <CourseItem key={item.id} item={item} updateCourses={updateCourses} />\n            })\n            setCourses(list);\n        })();\n    }, [])\n    return (\n        <div className=\"course-list\">\n            <h1>Course List</h1>\n            <Link to=\"/admin/course\">New Course</Link>\n            <ul>\n                {courses}\n            </ul>\n        </div>\n    );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './index.css';\nimport CourseEdit from './components/admin/CourseEdit';\nimport CourseList from './components/admin/CourseList';\n// import Signup from './components/admin/SignupForm';\n// import Signup from './components/admin/StyledSignupForm';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Router>\n    <Switch>\n      <Route path=\"/admin/course/:courseId(\\d+)?\">\n        <CourseEdit />\n      </Route>\n      <Route path=\"/admin\">\n        <CourseList />\n      </Route>\n    </Switch>\n  </Router>\n  // </React.StrictMode>\n  , document.getElementById('root')\n);\n\nserviceWorker.unregister();","// const baseApiUrl = 'http://api.magicmooc.org/';\nconst baseApiUrl = 'https://mooc-api.banyuan.club/';\n\nexport default {\n    baseApiUrl\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}