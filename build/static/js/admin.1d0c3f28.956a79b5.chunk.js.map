{"version":3,"sources":["store/config.js","store/apis.tsx","components/admin/CourseEdit.tsx","components/admin/CourseList.tsx","admin.tsx","serviceWorker.ts"],"names":["baseApiUrl","id","a","request","config","resp","detail","list","body","data","price","save","remove","getCourseDetail","getCourseList","saveCourse","deleteCourse","useState","name","summary","course","setCourse","saved","setSaved","message","setMessage","courseId","useParams","useEffect","apis","courseObj","className","to","enableReinitialize","initialValues","validationSchema","Yup","max","required","onSubmit","values","setSubmitting","error","htmlFor","type","as","CourseItem","item","updateCourses","title","onClick","courses","setCourses","compList","courseList","filter","it","map","key","ReactDOM","render","path","CourseEdit","CourseList","document","getElementById","serviceWorker","Boolean","window","location","hostname","match","unregister","navigator","ready","then","registration","catch","console"],"mappings":"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","file":"static/js/admin.1d0c3f28.956a79b5.chunk.js","sourcesContent":["// const baseApiUrl = 'http://api.magicmooc.org/';\nconst baseApiUrl = 'https://mooc-api.banyuan.club/';\n\nexport default {\n    baseApiUrl\n}","import axios from 'axios'\nimport { request } from 'graphql-request'\nimport config from './config';\n\nasync function getCourseDetail(id:number) {\n    id = id / 1;\n    const query = `query($id: Int!){\n        detail (id: $id){\n            id,name,price,summary\n        }\n    }`;\n    const resp = await request(config.baseApiUrl + 'lession', query, {id: id});\n    return resp.detail;\n}\n\nasync function getCourseList() {\n    const query = `query($pageNo: Int){\n        list (pageNo: $pageNo){\n            id,name,price,summary\n        }\n    }`;\n    const resp = await request(config.baseApiUrl + 'lession', query);\n    return resp.list;\n}\n\nasync function saveCourse(body:any, id?:number) {\n    id = id || 0;\n    id /= 1;\n    const query = `\n    mutation($data: CourseInputType!){\n        save (data: $data){\n            id, name\n        }\n    }`;\n    \n    const data = {...body}\n    data.price = data.price / 1;\n    const resp = await request(config.baseApiUrl + 'lession', query, {data});\n    return resp.save;\n}\n\nasync function deleteCourse(id:number) {\n    id /= 1;\n    const query = `mutation($id: Int!){\n        remove (id: $id){\n            error, message\n        }\n    }`;\n    const resp = await request(config.baseApiUrl + 'lession', query, {id});\n    return resp.remove;\n}\n\nexport default {\n    getCourseDetail,\n    getCourseList,\n    saveCourse,\n    deleteCourse\n}","import React, { useEffect, useState } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport apis from '../../store/apis'\nimport '../../assets/styles/admin/course-edit.less'\nimport { useParams, Redirect, Link } from 'react-router-dom';\n\nexport default () => {\n    const [course, setCourse] = useState({ name: '', id: 0, summary: '', price: 0});\n    const [saved, setSaved] = useState(false);\n    const [message, setMessage] = useState('');\n    let { courseId } = useParams();\n    courseId = courseId || 0;\n    useEffect(() => {\n        (async () => {\n            let courseObj = await apis.getCourseDetail(courseId);\n            if (courseObj)\n                setCourse(courseObj);\n        })();\n    }, [courseId])\n    return (\n        <div className=\"form-container\">\n            <h1>课程编辑</h1>\n            <Link to=\"/admin\">回课程列表</Link>\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ name: course.name, id: course.id, summary: course.summary, price: course.price }}\n                validationSchema={Yup.object({\n                    name: Yup.string()\n                        .max(30, 'Must be 30 characters or less')\n                        .required('Title can not be empty'),\n                    summary: Yup.string()\n                        .max(500, 'Must be 500 characters or less')\n                        .required('Summary can not be empty'),\n                    price: Yup.string()\n                        .required('Required'),\n                })}\n                onSubmit={async (values, { setSubmitting }) => {\n                    const resp = await apis.saveCourse(values, courseId);\n                    if (resp.error !== 999) {\n                        setCourse(resp);\n                        setSaved(true)\n                    } else {\n                        setMessage(resp.message);\n                    }\n                }}\n            >\n                <Form className=\"course-form form\">\n                    {saved && <Redirect to=\"/admin\" />}\n                    {message && <div className=\"error\">{message}</div>}\n                    <div className=\"row\">\n                        <label htmlFor=\"name\">标题：</label>\n                        <Field name=\"name\" type=\"text\" />\n                        <ErrorMessage name=\"name\" />\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"summary\">简介：</label>\n                        <Field name=\"summary\" as=\"textarea\" />\n                        <ErrorMessage name=\"summary\" />\n                    </div>\n                    <div className=\"row\">\n                        <div><label htmlFor=\"price\">价格：</label>\n                            <Field name=\"price\" type=\"text\" /></div>\n                        <div><ErrorMessage name=\"price\" /></div>\n                    </div>\n                    <div className=\"row center\">\n                        <button type=\"submit\">存 储</button>\n                    </div>\n                </Form>\n            </Formik>\n        </div >\n    );\n};","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom'\nimport apis from '../../store/apis'\nimport '../../assets/styles/admin/course-list.less'\nimport { useParams } from 'react-router-dom';\n\nfunction CourseItem({item, updateCourses}:any) {\n    return (\n        <li>\n            <span>{item.id}</span>\n            <span><Link to={'/admin/course/' + item.id}>{item.name}</Link></span>\n            <span>¥{item.price}</span>\n            <span className=\"summary\" title={item.summary}>{item.summary}</span>\n            <span className=\"button\" onClick={async ()=>{\n                 const resp = await apis.deleteCourse(item.id)\n                 if (!resp.error) {\n                     updateCourses(item.id)\n                 }\n            }}>[DELETE]</span>\n        </li>\n    )\n}\nexport default () => {\n    const [courses, setCourses] = useState([]);\n    useEffect(() => {\n        (async () => {\n            function updateCourses(id:number) {\n                courseList = courseList.filter(it=> {\n                    return (it.id != id)\n                })\n\n                const compList = courseList.map(it=> {\n                    return <CourseItem key={it.id} item={it} updateCourses={updateCourses} />\n                })\n\n                setCourses(compList);\n            }\n            let courseList = await apis.getCourseList();\n\n            const list = courseList.map(item => {\n                return <CourseItem key={item.id} item={item} updateCourses={updateCourses} />\n            })\n            setCourses(list);\n        })();\n    }, [])\n    return (\n        <div className=\"course-list\">\n            <h1>课程管理</h1>\n            <Link to=\"/admin/course\">新增课程</Link>\n            <ul>\n                {courses}\n            </ul>\n        </div>\n    );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport './index.css';\nimport CourseEdit from './components/admin/CourseEdit';\nimport CourseList from './components/admin/CourseList';\n// import Signup from './components/admin/SignupForm';\n// import Signup from './components/admin/StyledSignupForm';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Router>\n    <Switch>\n      <Route path=\"/admin/course/:courseId(\\d+)?\">\n        <CourseEdit />\n      </Route>\n      <Route path=\"/admin\">\n        <CourseList />\n      </Route>\n    </Switch>\n  </Router>\n  // </React.StrictMode>\n  , document.getElementById('root')\n);\n\nserviceWorker.unregister();","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}