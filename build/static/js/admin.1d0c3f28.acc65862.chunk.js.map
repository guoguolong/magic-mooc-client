{"version":3,"sources":["store/gql-api.js","components/admin/CourseEdit.tsx","components/admin/CourseList.tsx","admin.tsx","store/config.js","serviceWorker.ts"],"names":["COURSE_LIST","gql","COURSE_DETAIL","COURSE_SUMMARY","COURSE_SAVE","COURSE_REMOVE","ARTICLE_DETAIL","courseResp","useState","name","id","summary","price","course","setCourse","saved","setSaved","message","setMessage","courseId","useParams","useQuery","variables","useMutation","saveCourse","loading","error","useEffect","data","detail","className","to","enableReinitialize","initialValues","validationSchema","Yup","max","required","onSubmit","values","a","setSubmitting","update","cache","readQuery","query","writeQuery","list","concat","save","e","htmlFor","type","as","CourseItem","item","refetchQueries","remove","title","onClick","courses","setCourses","map","key","InMemoryCache","client","ApolloClient","link","HttpLink","uri","config","baseApiUrl","headers","ReactDOM","render","path","CourseEdit","CourseList","document","getElementById","serviceWorker","Boolean","window","location","hostname","match","unregister","navigator","ready","then","registration","catch","console"],"mappings":"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","file":"static/js/admin.1d0c3f28.acc65862.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const COURSE_LIST = gql`\n    query ($pageNo: Int){\n        course {\n            list (pageNo: $pageNo){\n                id,name,price,summary\n            }\n        }\n    }\n`;\n\nexport const COURSE_DETAIL = gql`\n    query ($id: Int!){\n        course {\n            detail (id: $id){\n                id,name,price,summary\n            }\n        }\n    }\n`;\n\nexport const COURSE_SUMMARY = gql`\n    query CourseSummary($courseId: Int!){\n        course {\n            summary (id: $courseId) {\n                id,name,summary,start_article_id,\n                activeArticle{\n                    id,name,content\n                },\n                articles {\n                    is_open @client, is_active @client, id,name,seq, parent_id,level,children {\n                        is_open @client, is_active @client, id,name,seq,parent_id,level,children {\n                            is_open @client, is_active @client, id,name,seq,parent_id,level\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport const COURSE_SAVE = gql`\n    mutation ($data: CourseInputType!){\n        course {\n            save (data: $data){\n                id, name, summary, price\n            }\n        }\n    }\n`\n\nexport const COURSE_REMOVE = gql`\n    mutation CourseRemove($id: Int!){\n        course {\n            remove (id: $id){\n                error, message\n            }\n        }\n    }\n`;\n\nexport const ARTICLE_DETAIL = gql`\n    query ArticleDetail($id: Int!){\n        article {\n            detail (id: $id){\n                id,name,content\n            }\n        }\n    }\n`\n","import React, { useEffect, useState } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { COURSE_DETAIL, COURSE_SAVE, COURSE_LIST } from '../../store/gql-api'\nimport apis from '../../store/apis'\nimport '../../assets/styles/admin/course-edit.less'\nimport { useParams, Redirect, Link } from 'react-router-dom';\n\nexport default () => {\n    const [course, setCourse] = useState({ name: '', id: 0, summary: '', price: 0 });\n    const [saved, setSaved] = useState(false);\n    const [message, setMessage] = useState('');\n    let { courseId } = useParams();\n    courseId = courseId / 1;\n\n    let courseResp;\n    if (courseId) {\n        courseResp = useQuery(\n            COURSE_DETAIL,\n            { variables: { id: courseId } }\n        );\n    }\n\n    const [saveCourse, { loading, error }] = useMutation(COURSE_SAVE);\n\n    useEffect(() => {\n        if (courseResp && courseResp.data) {\n            setCourse(courseResp.data.course.detail);\n        }\n    }, [courseResp])\n\n    return (\n        <div className=\"form-container\">\n            <h1>Course Edit</h1>\n            <Link to=\"/admin\">[Back to list]</Link>\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ name: course.name, id: course.id, summary: course.summary, price: course.price }}\n                validationSchema={Yup.object({\n                    name: Yup.string()\n                        .max(30, 'Must be 30 characters or less')\n                        .required('Title can not be empty'),\n                    summary: Yup.string()\n                        .max(500, 'Must be 500 characters or less')\n                        .required('Summary can not be empty'),\n                    price: Yup.string()\n                        .required('Required'),\n                })}\n                onSubmit={async (values, { setSubmitting }) => {\n                    values.price /= 1;\n                    try {\n                        const resp: any = await saveCourse({\n                            variables: {\n                                data: values,\n                            },\n                            update(cache, { data }) {\n                                try {\n                                    const { course } = cache.readQuery({ query: COURSE_LIST });\n                                    cache.writeQuery({\n                                        query: COURSE_LIST,\n                                        data: { course: course.list.concat([data.course.save]) },\n                                    });\n                                } catch (e) {\n                                    // cache COURSE_LIST could be empty.\n                                }\n                                setSaved(true); // redirect to /admin if it's true.\n                            }\n                        })\n                    } catch (e) {\n                        setMessage(e.message);\n                    }\n                }}\n            >\n                <Form className=\"course-form form\">\n                    {saved && <Redirect to=\"/admin\" />}\n                    {message && <div className=\"error\">{message}</div>}\n                    <div className=\"row\">\n                        <label htmlFor=\"name\">Title: </label>\n                        <Field name=\"name\" type=\"text\" />\n                        <ErrorMessage name=\"name\" />\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"summary\">Intro: </label>\n                        <Field name=\"summary\" as=\"textarea\" />\n                        <ErrorMessage name=\"summary\" />\n                    </div>\n                    <div className=\"row\">\n                        <div><label htmlFor=\"price\">Price: </label>\n                            <Field name=\"price\" type=\"text\" /></div>\n                        <div><ErrorMessage name=\"price\" /></div>\n                    </div>\n                    <div className=\"row center\">\n                        <button type=\"submit\">Save</button>\n                    </div>\n                </Form>\n            </Formik>\n        </div >\n    );\n};","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport { useQuery, useMutation} from '@apollo/react-hooks';\nimport { COURSE_LIST, COURSE_REMOVE } from '../../store/gql-api'\nimport '../../assets/styles/admin/course-list.less'\n\nfunction CourseItem({item}:any) {\n    const [remove, { loading, error }] = useMutation(\n        COURSE_REMOVE,\n        {\n          variables: { id: item.id },\n          refetchQueries: [\n            {\n              query: COURSE_LIST\n            },\n          ]\n        }\n    );\n\n    return (\n        <li>\n            <span>{item.id}</span>\n            <span><Link to={'/admin/course/' + item.id}>{item.name}</Link></span>\n            <span>¥{item.price}</span>\n            <span className=\"summary\" title={item.summary}>{item.summary}</span>\n            <span className=\"button\" onClick={async ()=> remove()}>[DELETE]</span>\n        </li>\n    )\n}\nexport default () => {\n    const [courses, setCourses] = useState([]);\n    const { data, loading, error } = useQuery(\n        COURSE_LIST\n    );\n\n    useEffect(() => {\n        (async () => {\n            if (data && data.course && data.course.list) {\n                const list = data.course.list.map(item => {\n                    return <CourseItem key={item.id} item={item} />\n                })\n                setCourses(list);\n            }\n        })();\n    }, [data])\n\n    if (loading) return <p className=\"loading\">Loading...</p>;\n    if (error) return <p>ERROR: {error.message}</p>;\n\n    return (\n        <div className=\"course-list\">\n            <h1>Course List</h1>\n            <Link to=\"/admin/course\">[New Course]</Link>\n            <ul>\n                {courses}\n            </ul>\n        </div>\n    );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n// import { resolvers, typeDefs } from './resolvers';\n\nimport CourseEdit from './components/admin/CourseEdit';\nimport CourseList from './components/admin/CourseList';\nimport config from './store/config'\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nconst cache = new InMemoryCache();\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link: new HttpLink({\n    uri: config.baseApiUrl,\n    headers: {\n      // authorization: localStorage.getItem('token'),\n      'client-name': 'Magic Mooc Admin[web]',\n      'client-version': '1.0.0',\n    },\n  }),\n  // resolvers,\n  // typeDefs,\n});\n\nReactDOM.render(\n  // <React.StrictMode>\n  <ApolloProvider client={client}>\n    <Router>\n      <Switch>\n        <Route path=\"/admin/course/:courseId(\\d+)?\">\n          <CourseEdit />\n        </Route>\n        <Route path=\"/admin\">\n          <CourseList />\n        </Route>\n      </Switch>\n    </Router>\n  </ApolloProvider>    \n  // </React.StrictMode>\n  , document.getElementById('root')\n);\n\nserviceWorker.unregister();","// const baseApiUrl = 'http://api.magicmooc.org/graphql';\n// const baseApiUrl = 'http://localhost:4000/graphql';\nconst baseApiUrl = 'https://mooc-api.banyuan.club/';\n\nexport default {\n    baseApiUrl\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}